//数位dp

int f[20][150], digit[20];
ll a, b, s;
int dfs(int pos, int pre, int limit, int lead) {
    if (pos == 0 && pre == s)return 1;
    if (pre + pos * 9 < s)return 0;
    if (!lead && !limit && f[pos][pre] != -1)return f[pos][pre];
    int sum = 0, up;
    if (limit)up = digit[pos];
    else up = 9;
    for (int i = 0; i <= up; i++) {
        if (pre + i > s)break;
        sum += dfs(pos - 1, pre + i, (limit && (i == up)), lead && (i == 0));
    }
    if (!limit && !lead)f[pos][pre] = sum;
    return sum;
}
int solve(int x) {
    memset(f, -1, sizeof(f));
    memset(digit, 0, sizeof(digit));
    int cnt = 0;
    while (x) { digit[++cnt] = x % 10; x /= 10; }
    return dfs(cnt, 0, 1, 1);
}
void solve() {
    cin >> a >> b >> s; int x = solve(a - 1);
    cout << solve(b) - solve(a - 1) << "\n";
    int l = a, r = b, ans = 0;
    while (l <= r) {
        int mid = (l + r) / 2;
        if (solve(mid) > x) { r = mid - 1; ans = mid; }
        else l = mid + 1;
    }
    cout << ans << endl;
}
