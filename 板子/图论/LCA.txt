//LCA

int dep[maxn], fat[maxn][23],siz[maxn];
void dfs(int u, int fa) {
	dep[u] = dep[fa] + 1;
	siz[u] = 1;
	fat[u][0] = fa;
	for (int i = head[u]; i; i = e[i].next) {
		int v = e[i].to;
		if (v == fa)continue;
		dfs(v, u);
		siz[u] += siz[v];
	}
}
int LCA(int x, int y) {
	if (dep[x] > dep[y])swap(x, y);
	for (int i = 20; i >= 0; i--)
		if (dep[x] <= dep[fat[y][i]])y = fat[y][i];
	if (x == y)return x;
	for (int i = 20; i >= 0; i--)
		if (fat[x][i] != fat[y][i])
			x = fat[x][i], y = fat[y][i];
	return fat[x][0];
}

void solve() {
	int n, q; cin >> n >> q;
	for (int i = 1; i < n; i++) {
		int x, y; cin >> x >> y;
		addedge(x, y);
		addedge(y, x);
	}
	dfs(1, 0);
	for (int i = 1; i <= 20; i++)
		for (int j = 1; j <= n; j++)
			fat[j][i] = fat[fat[j][i - 1]][i - 1];
}